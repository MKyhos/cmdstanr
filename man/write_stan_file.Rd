% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/example.R
\name{write_stan_file}
\alias{write_stan_file}
\title{Write Stan code to a file}
\usage{
write_stan_file(
  code,
  dir = tempdir(),
  basename = NULL,
  force_overwrite = FALSE,
  hash_salt = ""
)
}
\arguments{
\item{code}{A single string containing a Stan program or a character vector
containing the individual lines of a Stan program. See \strong{Examples}.}

\item{dir}{An optional path to the directory where the file will be written.
If omitted, a \link[base:tempfile]{temporary directory} is used by default.}

\item{basename}{If \code{dir} is specified, an optional string providing the
basename for the file created. If not specified a file name is generated
via \code{\link[rlang:hash]{rlang::hash()}} of the code.}

\item{force_overwrite}{if set to \code{TRUE} the file will always be
overwritten and thus the resulting model will always be recompiled}

\item{hash_salt}{will be added to model code prior hashing to determine
filename if the \code{basename} param is not set.}
}
\value{
The path to the file.
}
\description{
Convenience function for writing Stan code to a (possibly
\link[base:tempfile]{temporary}) file with a \code{.stan} extension.
By default, the filename is chosen deterministically based on the Stan code
via \code{\link[rlang:hash]{rlang::hash()}},
and the file is not overwritten if it already has correct contents.
This means that calling this function multiple times with the same Stan code
will reuse the compiled model. This also however means that the function
is potentially not thread-safe. Using \code{hash_salt = Sys.getpid()} should
ensure thread-safety in the rare cases when it is needed.
}
\examples{
# stan program as a single string
stan_program <- "
data {
  int<lower=0> N;
  int<lower=0,upper=1> y[N];
}
parameters {
  real<lower=0,upper=1> theta;
}
model {
  y ~ bernoulli(theta);
}
"

f <- write_stan_file(stan_program)
print(f)

lines <- readLines(f)
print(lines)
cat(lines, sep = "\n")

# stan program as character vector of lines
f2 <- write_stan_file(lines)
identical(readLines(f), readLines(f2))

}
